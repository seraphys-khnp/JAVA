9.24 1교시

오늘부터 본격적으로 코딩
어제보다는 덜 중요하지만, 내일보다는 훨씬 중요한 것들

OS에 따라서 각각에 맞는 JAVA Vurtual Machine이 있고.
어디서든 JAVA로 Source(.java)를 만들어서
컴파일 한 결과인 Byte code(.class)가 있다면
어떤 OS의 VM에서라도 모두 동작함을 보장한다.

오늘의 핵심!
< Program >

어원은 오페라에서 음악이 연주되는 순서?
본질적으로 이 말속에는 time, sequence 개념이 있다.
즉, 프로그램은 순서대로 시간에 따라서 실행되는 것.

포토샵에도 Action recording이 있어서
단순 반복 작업을 프로그램으로 만들 수 있다.
Batch(일괄처리) 기능은 특정 폴더에 있는 이미지들을
Action으로 자동처리 해서 
원하는 폴더에 저장해준다.
이런 것들이 모두 프로그램이다.

그리고 우리들도 모두 프로그래머다.
우리들은 무엇을 할지 순서를 생각하고 하기때문이다.

자동화의 핵심은 프로그램이고,
프로그램을 하는 이유가 자동화이다.

버젼관리?
어떻게 하는가?

소프트웨어 파워게임
1. 개발을 기가 막히게
2. 분야를 기가 막히게
3. 협업을 기가 막히게. 버젼관리라는 시스템을 통해서

3번은 가성비가 가장 좋다. 조금만 노력하면 충분히 잘 할 수있다.


디버깅 방법
1. 단계별로 System.out.println 해본다.
2. debug 기능 이용

Breakpoint 이용해서 변수들 상태 관찰 가능.
Step over 또는 Resume 이용

초심자들은 이런 도구의 도움을 최대한 이용해야 한다.
개념 익히는 것도 중요하지만, Tool을 어떻게 쓰는지 알아야 한다.
그리고 코드를 처음 짜는 사람들은
다른 사람의 코드를 많이 보는 것보다
자기가 필요한 코드를 짜보는 것이 훨씬 쉽고 도움이 된다.
다른 사람의 코드를 보는 것은 정말 쉽지 않다.


다른 코드를 읽을 때 순서

VM은 우리가 실행시킨 .class 파일의 이름과 똑같은 class를 코드에서 찾는다.
그리고 거기에서 main {}에서 시작하게 된다.

하지만 역시 debug 이용하는 것이 편하다.

국문과에 개발자가 없어서
주변에 개발자가 없어서
실력은 빨리 늘지 않지만, 주변에서는 알아주는?
늘지 않는 실력으로 계속하다보면 무엇을 더 공부해야 할지 알게 된다.



<2교시>
지금까지 우리가 만든 프로그램은 출력만 한다.
이번시간에는 입력을 하게 할 것이다.

입력,출력은 다양하다.
상상할 수 있는 모든것?


Run Configurations에서
JAVA Application을 선택하고
Program arguments에서 
값을 아무거나 입력해본다.
Apply하고 Run 해보면 아무 변화가 없다.

입력을 설정만 했지, 어떻게 받을지는 모른다.

JAVA는 main을 실행할 때 입력값을 args라는 변수에 받아서
code를 실행하게 된다.

하지만 Total에 args[0]을 입력으로 주면 못받는다.
Data Type 달라서.
그럼 string을 어떻게 double로 바꿀 것인가.
모르면 Google 검색.

검색하니까 Double.parseDouble()함수가 나온다.
써보니까? 된다!

어떤 상태에서 컴공과에 가는가가 중요하다.
대부분의 전공은 이전에 경험이 없다.
하지만 컴공과는 대부분 코딩을 경험하고 오는 사람들이 대부분.
지금까지 해결못한 문제들을 전공을 하면서 엄청난 해결책들을 만나게되서
신나서 하는 반면에,
아무것도 경험하지 않고 하게되면 무력감에 빠질 수 있다.


작성한 Code를 다른 곳에서 어떻게 실행시킬 수 있는가?
1. Eclipse 설치
2. Eclipse 없이 Compile해서(또는 .class 파일을) Eclipse 없이 실행(배울것)

Java\jdk-13\bin 보면 java.exe 와 javac.exe가 있다.

java.exe : Java Virtual Machine
javac.exe : Java Compiler

이것들을 이용해서 Eclipse 없이 작업을 할 것이다.

컴파일 : javac 경로\파일
실행 : java -cp 경로 클래스 아규먼트


3교시

버젼관리 프로그램에서 어떤 작업을 했는지 기록하면서 관리할 수 있다.
Git?

지금까지 한 것
설치->프로그램 실행원리? -> 컴파일 및 실행

코드들이 많아지면 서로 연관 있는것들끼리 그룹화시켜서 관리해야 한다.


4교시

메서드없이 코딩할 수 없다.
우리는 이미 메서드를 사용해오고 있었다.

절차지향 프로그래밍 vs.객체지향 프로그래밍

절차지향 : 함수들을 부품처럼 만들어서 레고처럼 조립해서 프로그램을 만든다?
프로그램의 구조를 담당하는 개념

객체지향 : 

